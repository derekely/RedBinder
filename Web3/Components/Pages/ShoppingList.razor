@using CSharpFunctionalExtensions
@using MediatR
@using RedBinder.Application.ShoppingList
@using RedBinder.Domain.ValueObjects
@using Redbinder.Web3.StaticObjects
@rendermode InteractiveServer
@inject IMediator Mediator
@inject ShoppingListState ShoppingListState

@page "/shopping-list"

<PageTitle>Shopping List</PageTitle>

@if (_shoppingCart == null)
{
    <p>Loading...</p>
}
else
{
    <h1>Shopping List</h1>
    <ul>
        @foreach (var item in _shoppingCart.ShoppingItems)
        {
            <li>@item.GetMeasurementString()</li>
        }
    </ul>
    
    <button class="btn-outline-danger" @onclick="ClearShoppingList">Clear</button>
}

@if (fetchResult is { IsFailure: true, Error: not null })
{
    <div class="alert alert-danger" role="alert">"Error loading shopping list: @fetchResult.Error"</div>
}


@code {
    private ShoppingCart _shoppingCart { get; set; }
    Result fetchResult;

    protected override async Task OnInitializedAsync()
    {
        var shoppingCartResult = await Mediator.Send(new GetShoppingListQuery(ShoppingListState.RecipeIds));
        
        if (shoppingCartResult.IsSuccess)
        {
            _shoppingCart = shoppingCartResult.Value;
        }
        
        base.OnInitialized();
    }
    
    private void ClearShoppingList()
    {
        ShoppingListState.ClearRecipeIds();
        _shoppingCart = null;
    }

}